(function() {
    // Details for each action.
    var actions = [
{% for action in settings.actions %}
        {
            action: '{{ action.action | raw }}',
            location: new RegExp('{{ action.location | raw }}'),
            status: new RegExp('{{ action.status | raw }}'),
            button: '{{ (action.button ?: action.action) | raw }}'
        }{{ loop.last ? '' : ',' }}
{% endfor %}
    ];

    var item = {}, keys = [];

    // Get metadata from the item record.
    Array.prototype.forEach.call(
        document.querySelectorAll('.bibInfoEntry tr'),
        function(element) {
            var label = element.querySelector('.bibInfoLabel');

            if (label) {
                label = label.textContent.trim().replace(/:/, '');

                switch(label) {
                    case 'Author':
                    case 'Title':
                    case 'Publication':
                    case 'Edition':
                    case 'Permalink':
                        item[label] = element.querySelector('.bibInfoData')
                            .textContent.trim();
                }
            }
        }
    );

    if (typeof item['Permalink'] === 'undefined') {
        return;
    }

    // Get keys as the column headings for the first bib item table.
    Array.prototype.forEach.call(
        document.querySelectorAll('th.bibItemsHeader'),
        function(element) {
            keys.push(element.textContent.trim());
        }
    );

    // Loop through each bib item.
    Array.prototype.forEach.call(
        document.querySelectorAll('.bibItemsEntry'),
        function(element, index) {
            var cell = {}, text = item;

            // Retrieve the cell and text from the entry for each column.
            for (var count = 0; count < keys.length; count++) {
                cell[keys[count]] = element.querySelectorAll('td')[count];
                text[keys[count]] = '';

                Array.prototype.forEach.call(
                    cell[keys[count]].childNodes,
                    function(node) {
                        if (node.nodeType !== 1 && node.nodeType !== 3) {
                            return;
                        }

                        if (typeof node.classList !== 'undefined') {
                            if (node.classList.contains('button')) {
                                return;
                            }
                        }

                        text[keys[count]] += node.textContent;
                    }
                );

                text[keys[count]] = text[keys[count]].trim();
            }

            // Loop through each action.
            actions.forEach(function(action) {
                // Skip the action if the location or status do not match.
                if (!text['Location'].match(action['location'])) {
                    return;
                }

                if (!text['Status'].match(action['status'])) {
                    return;
                }

                // Create the button for the action.
                var button = document.createElement('a');

                button.setAttribute(
                    'href',
                    '{{ base_url() }}/' +
                    action['action'].toLowerCase().replace(/[^\w\-]+/g, '-') +
                    '?' +
                    Object.keys(text).map(function(key) {
                        return encodeURIComponent(key) + '=' +
                            encodeURIComponent(text[key]);
                    }).join('&')
                );

                button.setAttribute(
                    'aria-label',
                    'Schedule for Use: ' +
                        text['Location'] + ' ' +
                        text['Call Number'] + ' ' +
                        text['Volume']
                );

                button.innerHTML = action['button'];
                button.addEventListener('click', function(event) {
                    // Set button to load a popup window when clicked.
                    window.open(
                        this.href,
                        'action',
                        'width=780,height=780,' +
                        'menubar=1,resizable=1,scrollbars=1'
                    );

                    event.preventDefault();
                });

                cell['Status'].insertBefore(button, cell['Status'].firstChild);
            });
        }
    );
})();
